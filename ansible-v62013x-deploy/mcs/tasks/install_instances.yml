---

- name: unarchiving tomcat 
  remote_user: monitor
  sudo: true
  unarchive: src="{{installer_path}}/{{tomcat_installer}}" dest="{{ mcs_instance_path }}" owner={{ plm_user }} group={{ plm_group }} copy=no 
  tags: 
   - install-mcs
   - install-instances
  
- name: create tomcat instances
  file: dest="{{mcs_instance_path}}/{{ item.key }}" state=directory 
  with_dict: instances
  tags: 
   - install-mcs
   - install-instances


- name: copy tomcat content to instance
  remote_user: monitor
  sudo: true
  synchronize:
     src: "{{mcs_instance_path}}/{{ tomcat_version }}/." 
     dest: "{{mcs_instance_path}}/{{ item.key }}" 
     checksum: yes 
     recursive: yes
     archive: no 
  delegate_to: "{{inventory_hostname}}"
  with_dict: instances
  tags: 
   - install-mcs
   - install-instances

- name: remove tomcat version
  remote_user: monitor
  sudo: true
  file: path="{{mcs_instance_path}}/{{ tomcat_version }}" state=absent
  tags: 
      - install-mcs
      - install-instances

- name: chage ownership
  remote_user: monitor
  sudo: true
  command: chown -R "{{plm_user}}":"{{plm_group}}" "{{mcs_instance_path}}/{{ item.key }}" 
  with_dict: instances
  tags: 
   - install-mcs
   - install-instances
  
  
- name: deploy the war
  shell: cp "{{mcs_code_dir}}/{{mcs_build_path}}" "{{mcs_instance_path}}/{{ item.key }}/webapps"  
  delegate_to: "{{inventory_hostname}}"
  with_dict: instances
  tags: 
      - install-mcs
      - deploy-code
      - install-instances

- name: create link for logs
  remote_user: monitor
  sudo: true 
  file: src="{{ mcs_log_dir }}/{{ item.key }}" dest="{{ mcs_instance_path }}/{{ item.key }}/logs" owner={{ plm_user }} group={{ plm_group }} state=link force=yes  
  with_dict: instances
  tags: 
      - install-mcs
      - deploy-code
      - install-instances

